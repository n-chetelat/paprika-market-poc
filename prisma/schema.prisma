generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentMode {
  oneTime
  subscription
}

model User {
  id               String  @id @default(uuid())
  hashedPassword   String
  firstName        String
  lastName         String
  email            String  @unique
  avatarUrl        String?
  stripeCustomerId String?

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
  orders         Order[]
  userBusinesses UserBusiness[]
  subscription   Subscription[]
  coupons        Coupon[]
}

model Business {
  id               String  @id @default(uuid())
  name             String
  description      String
  stripeAccountId  String
  isStripeVerified Boolean @default(false)
  logoURL          String
  email            String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  userBusinesses        UserBusiness[]
  products              Product[]
  stripeDisabledReasons StripeDisabledReason[]
  subscriptions         Subscription[]
  coupons               Coupon[]
}

model UserBusiness {
  id         String @id @default(uuid())
  userId     String
  businessId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  business Business @relation(fields: [businessId], references: [id])
}

model Product {
  id           String   @id @default(uuid())
  name         String
  priceInCents Int
  quantity     Int
  published    Boolean  @default(false)
  imageURLs    String[]
  businessId   String

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  orders         Order[]
  business       Business        @relation(fields: [businessId], references: [id])
  subscriptions  Subscription[]
  productCoupons ProductCoupon[]
}

model Order {
  id                      String      @id @default(uuid())
  customerId              String
  productId               String
  pricePaidInCents        Int
  stripeCheckoutSessionId String      @unique
  refundedAt              DateTime?
  mode                    PaymentMode @default(oneTime)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  product      Product       @relation(fields: [productId], references: [id])
  customer     User          @relation(fields: [customerId], references: [id])
  subscription Subscription?
}

model StripeDisabledReason {
  id         String @id @default(uuid())
  businessId String
  code       String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  business Business @relation(fields: [businessId], references: [id])
}

model Subscription {
  id                   String @id @default(uuid())
  userId               String
  businessId           String
  productId            String
  orderId              String @unique
  stripeSubscriptionId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  product  Product  @relation(fields: [productId], references: [id])
  business Business @relation(fields: [businessId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
  order    Order    @relation(fields: [orderId], references: [id])
}

model Coupon {
  id             String  @id @default(uuid())
  businessId     String
  customerId     String?
  stripeCouponId String
  name           String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  business       Business        @relation(fields: [businessId], references: [id])
  customer       User?           @relation(fields: [customerId], references: [id])
  productCoupons ProductCoupon[]
}

model ProductCoupon {
  id        String @id @default(uuid())
  productId String
  couponId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  product Product @relation(fields: [productId], references: [id])
  coupon  Coupon  @relation(fields: [couponId], references: [id])
}
